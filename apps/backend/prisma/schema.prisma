// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  fname           String
  lname           String
  password        String
  serviceRequests ServiceRequest[]
  reviews         Review[]
  payments        Payment[]         // Added payments field to connect User with Payments
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model ServiceRequest {
  id           Int        @id @default(autoincrement())
  description  String
  userId       Int
  status       String
  paymentId    Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id])
  payment      Payment?   @relation // No fields/references here to avoid conflicts
  reviews      Review[]
}

model Payment {
  id               Int        @id @default(autoincrement())
  amount           Float
  paymentMethod    String     // e.g., "COD", "UPI", "CreditCard"
  serviceRequestId Int        @unique  // Marked as unique for one-to-one relation
  userId           Int
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id]) // Relation on this side
  user             User           @relation(fields: [userId], references: [id])
}

model Review {
  id               Int        @id @default(autoincrement())
  rating           Int
  comment          String
  userId           Int
  serviceRequestId Int
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  user             User       @relation(fields: [userId], references: [id])
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id])
}
